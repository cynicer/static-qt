name: Build Static Qt (Windows)

on:
  workflow_dispatch:
    inputs:
      qt_version:
        description: 'Qt version (e.g., 6.9.1)'
        required: true
        default: '6.9.1'
      openssl_version:
        description: 'OpenSSL version (e.g., 3_5_2)'
        required: true
        default: '3_5_2'

jobs:
  build-qt:
    runs-on: windows

    env:
      QT_VERSION: ${{ inputs.qt_version }}
      OPENSSL_VERSION: ${{ inputs.openssl_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install build dependencies
        run: |
          choco install -y strawberryperl winflexbison ninja 7zip

      - name: Download Qt Source
        shell: bash
        run: |
          QT_MINOR_VERSION=$(echo "${{ env.QT_VERSION }}" | cut -d. -f1,2)
          echo "QT_MINOR_VERSION=$QT_MINOR_VERSION" >> $GITHUB_ENV
          #curl -LO https://download.qt.io/official_releases/qt/$QT_MINOR_VERSION/${{ env.QT_VERSION }}/single/qt-everywhere-src-${{ env.QT_VERSION }}.zip
          #7z x qt-everywhere-src-${{ env.QT_VERSION }}.zip -y > /dev/null
          7z x C:/Qt/qt-everywhere-src-6.9.1.zip -o.

      - name: Download and Extract OpenSSL (prebuilt)
        run: |
          #$installer = "Win64OpenSSL-${{ env.OPENSSL_VERSION }}.exe"
          #Invoke-WebRequest -Uri "https://slproweb.com/download/$installer" -OutFile $installer
          #Start-Process -Wait -FilePath $installer -ArgumentList "/silent", "/verysilent", "/sp-", "/suppressmsgboxes", "/DIR=C:\OpenSSL"

      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure Qt with CMake (static + OpenSSL)
        shell: bash
        run: |
          rm -rf "C:/Qt/${{ env.QT_VERSION }}-qt-static-win"
          mkdir ${{ env.QT_VERSION }}
          mkdir "${{ env.QT_VERSION }}-build"
          cd "${{ env.QT_VERSION }}-build"
          ../qt-everywhere-src-${{ env.QT_VERSION }}/configure -static -static-runtime -debug-and-release -platform win32-msvc \
            -opensource -confirm-license -prefix "C:/Qt/${{ env.QT_VERSION }}-qt-static-win" \
            -qt-zlib -qt-libjpeg -qt-libpng -qt-freetype -qt-pcre -qt-harfbuzz \
            -skip qt3d -skip qtactiveqt -skip qtcharts -skip qtcoap -skip qtconnectivity \
            -skip qtdeclarative -skip qtlocation -skip qtgraphs -skip qtdatavis3d \
            -skip qtdoc -skip qtlottie -skip qtmqtt -skip qtnetworkauth -skip qtopcua \
            -skip qtpositioning -skip qtquick3d -skip qtquick3dphysics -skip qtquicktimeline \
            -skip qtquickcontrols2 -skip qtquickvectorimage -skip qtquickeffects \
            -skip qtremoteobjects -skip qtscxml -skip qtsensors -skip qtserialbus \
            -skip qtserialport -skip qtvirtualkeyboard -skip qtwayland \
            -skip qtwebchannel -skip qtwebengine -skip qtwebview \
            -skip qtspeech -skip qthttpserver \
            -openssl-linked -I "C:/OpenSSL/include" -L "C:/OpenSSL/lib/VC/x64/MT" OPENSSL_LIBS="-lUser32 -lAdvapi32 -lGdi32 -lCrypt32 -lws2_32 -lssl_static -lcrypto_static" \
            -nomake examples -nomake tests \
            -- -DCMAKE_EXE_LINKER_FLAGS_INIT="/LIBPATH:C:/Qt/${QT_VERSION}-qt-static-win/lib" -DCMAKE_SHARED_LINKER_FLAGS_INIT="/LIBPATH:C:/Qt/${QT_VERSION}-qt-static-win/lib"

      - name: Build Qt (Debug + Release)
        shell: bash
        run: |
          cd "${{ env.QT_VERSION }}-build"
          cmake --build . --parallel --config Release
          cmake --build . --parallel --config Debug
      
      - name: Install Qt (Debug + Release)
        shell: bash
        run: |
          cd "${{ env.QT_VERSION }}-build"
          cmake --install . --config Release
          cmake --install . --config Debug

      - name: Copy OpenSSL static libs
        shell: bash
        run: |
          cp "C:/OpenSSL/lib/VC/x64/MT/libssl_static.lib" "C:/Qt/${{ env.QT_VERSION }}-qt-static-win/lib/libssl.lib"
          cp "C:/OpenSSL/lib/VC/x64/MT/libcrypto_static.lib" "C:/Qt/${{ env.QT_VERSION }}-qt-static-win/lib/libcrypto.lib"

# TODO cleanup vars

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.QT_VERSION }}-qt-static-win
          path: "C:/Qt/${{ env.QT_VERSION }}-qt-static-win"
          include-hidden-files: true
